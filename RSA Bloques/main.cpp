#include <vector>
#include <iostream>
#include "NTL/ZZ.h"
#include <string>
#include<sstream>

using namespace NTL;
using namespace std;

class RSA_BLOQUES {
    ZZ p, q, N, e, d, phi_N; // e==calve publica
    ZZ clv;
    int bt;
    string  abc = "abcdefghijklmnopqrstuvwxyz().0123456789 ABCDEFGHIJKLMNOPQRSTUVWXYZ,+-[]";
public:
    RSA_BLOQUES(ZZ Ne, ZZ clvp);
    RSA_BLOQUES(ZZ N_1, ZZ e_1, ZZ d_1);
    vector<ZZ> criba(ZZ mayor, ZZ menor);
    ZZ explosion_modular(ZZ base, ZZ exponente, ZZ mod);
    ZZ modulo(ZZ a, ZZ b);
    bool euclides(ZZ a, ZZ b);
    bool test_prim(ZZ numero);
    ZZ generar_primo(int bits);
    vector<ZZ> euclides_plus(ZZ a, ZZ b);
    ZZ inversa(ZZ e, ZZ N);
    string cifrar(string messenger);
    string descifrado(string msg);
};

RSA_BLOQUES::RSA_BLOQUES(ZZ N_1, ZZ e_1, ZZ d_1) {
    N = N_1;
    e = e_1;
    d = d_1;
}

RSA_BLOQUES::RSA_BLOQUES(ZZ a, ZZ b) {
    p = a;
    q = b;
    phi_N = (p - ZZ(1)) * (q - ZZ(1));
    e = RandomBnd(phi_N);
    while (!euclides(e, phi_N)) {
        e = RandomBnd(phi_N);
    }
    d = euclides_plus(e, phi_N)[0];
    N = p * q;
    cout << N << endl << e << endl << d << endl;
}
vector<ZZ> RSA_BLOQUES::criba(ZZ mayor, ZZ menor) {
    ZZ intervalo = (mayor - menor) + 1;
    int primos = 2;
    bool agregar = true;
    vector<ZZ> numero_primos;
    while (menor <= mayor) {
        agregar = true;
        primos = 2;
        while (primos * primos < mayor) {
            if (menor % primos == 0) {
                agregar = false;
                break;
            }
            primos += 1;
        }
        if (agregar) {
            numero_primos.push_back(menor);
        }
        menor += 1;
    }
    return numero_primos;
}
ZZ RSA_BLOQUES::explosion_modular(ZZ base, ZZ exponente, ZZ mod) {
    ZZ exp = ZZ(1);
    while (exponente > 0) {
        if (modulo(exponente, ZZ(2)) == 1) {
            exp = modulo((exp * base), mod);
        }
        base = (base * base) % mod;
        exponente = (exponente / 2);
    }
    return exp;
}
ZZ RSA_BLOQUES::modulo(ZZ a, ZZ b) {
    ZZ aux = a / b;
    ZZ residuo = a - (aux * b);
    if (residuo < 0) {
        residuo += b;
    }
    return residuo;
}
bool RSA_BLOQUES::euclides(ZZ a, ZZ b) {
    ZZ q;
    ZZ r_1 = a;
    ZZ r_2 = b;
    ZZ r;
    while (r_2 > 0) {
        q = r_1 / r_2;
        r = r_1 - (q * r_2);
        r_1 = r_2;
        r_2 = r;
    }
    if (r_1 == 1) {
        return true;
    }
    else {
        return false;
    }
}
ZZ RSA_BLOQUES::generar_primo(int bits) {
    srand(time(NULL));
    vector<ZZ> premo;
    int exponente = bt / 2;
    ZZ numero = ZZ(2);
    ZZ aux = numero;
    while (exponente > 0) {
        numero *= aux;
        exponente -= 1;
    }
    premo = criba(numero - 1, numero / 2);
    int random = rand() % premo.size();
    return premo[random];

}

bool RSA_BLOQUES::test_prim(ZZ numero) {
    ZZ aux = ZZ(8);
    if (explosion_modular(aux, numero, numero) != aux) {
        return false;
    }
    return true;
}

vector<ZZ> RSA_BLOQUES::euclides_plus(ZZ a, ZZ b) {
    vector<ZZ> invrt;
    ZZ r_1 = a; // residuo
    ZZ r_2 = b;
    ZZ s_1 = ZZ(1); // x
    ZZ s_2 = ZZ(0);
    ZZ t_1 = ZZ(0); // y
    ZZ t_2 = ZZ(1);
    ZZ q = ZZ(0);
    ZZ r = ZZ(0);
    ZZ s = ZZ(0);
    ZZ t = ZZ(0);
    bool rtn = false;
    while (!rtn) {
        invrt.clear();
        while (r_2 > 0) {
            q = r_1 / r_2;
            r = r_1 % r_2;
            r_1 = r_2;
            r_2 = r;
            s = s_1 - (q * s_2);
            s_1 = s_2;
            s_2 = s;
            t = t_1 - (q * t_2);
            t_1 = t_2;
            t_2 = t;
        }
        if (r_1 == 1) {
            if (s_1 < 0) {
                s_1 += b;
            }
            rtn = true;
        }
        else {
            r_1 = generar_primo(16);
        }
    }
    invrt.push_back(s_1);
    invrt.push_back(t_1);
    invrt.push_back(r_1);
    return invrt;
}
ZZ RSA_BLOQUES::inversa(ZZ e, ZZ N) {
    vector<ZZ> resultados;
    resultados = euclides_plus(e, N);
    return resultados[0];
}
string RSA_BLOQUES::cifrar(string messenger) {
    string aux_abc = to_string(abc.size());
    int cifras_abc = aux_abc.size();
    stringstream valor_grande;
    valor_grande << N;
    string cifras = valor_grande.str();
    int cifras_N = cifras.size();
    int bloques_N = cifras.size() - 1;
    int pos;
    ZZ valor = ZZ(0);
    string aux_numeros = "";
    string numeros = "";
    string bloques = "";
    string msg = "";
    for (int i = 0; i < messenger.size(); i++) {
        aux_numeros = "";
        pos = abc.find(messenger[i]);
        aux_numeros += to_string(pos);
        while (aux_numeros.size() < cifras_abc) {
            aux_numeros = ('0' + aux_numeros);
        }
        numeros += aux_numeros;
    }
    cout << numeros << endl;
    aux_numeros = to_string(abc.find('w'));
    while (numeros.size() % bloques_N != 0) {
        numeros += aux_numeros[numeros.size() % 2];
    }
    cout << numeros << endl;
    vector<string> block;
    for (int i = 0; i < numeros.size(); i++) {
        bloques += numeros[i];
        if (bloques.size() == bloques_N) {
            block.push_back(bloques);
            bloques = "";
        }
    }
    for (int i = 0; i < block.size(); i++) {
        string aux = block[i];
        ZZ ayuda = ZZ(1);
        for (int j = aux.size() - 1; j >= 0; j--) {
            int help = to_int(aux[j]) - '0';
            valor += (help * ayuda);
            ayuda *= 10;
        }
        valor = explosion_modular(valor, e, N);
        stringstream valor_grande;
        valor_grande << valor;
        bloques = valor_grande.str();
        while (bloques.size() < cifras_N) {
            bloques = ('0' + bloques);
        }
        msg += bloques;
        valor = ZZ(0);
    }
    cout << msg << endl;
    return msg;
}
string RSA_BLOQUES::descifrado(string msg) {
    string aux_abc = to_string(abc.size());
    int cifras_abc = aux_abc.size();
    stringstream valor_grande;
    valor_grande << N;
    string cifras = valor_grande.str();
    int cifras_N = cifras.size();
    int bloques_N = cifras.size() - 1;
    int pos;
    string bloque = "";
    string numero = "";
    string result = "";
    vector<string>cuadrados;
    ZZ valor = ZZ(0);
    for (int i = 0; i < msg.size(); i++) {
        bloque += msg[i];
        if (bloque.size() == cifras_N) {
            cuadrados.push_back(bloque);
            bloque = "";
        }
    }
    for (int i = 0; i < cuadrados.size(); i++) {
        bloque = cuadrados[i];
        ZZ ayuda = ZZ(1);
        for (int j = bloque.size() - 1; j >= 0; j--) {
            int help = to_int(bloque[j]) - '0';
            valor += (help * ayuda);
            ayuda *= 10;
        }
        valor = explosion_modular(valor, d, N);
        stringstream valor_grande;
        valor_grande << valor;
        bloque = valor_grande.str();
        while (bloque.size() < bloques_N) {
            bloque = ('5' + bloque);
        }
        result += bloque;
        valor = ZZ(0);
    }
    cout << result << endl;

    vector<string>letras;
    bloque = "";
    for (int i = 0; i < result.size(); i++) {
        bloque += result[i];
        if (bloque.size() == cifras_abc) {
            letras.push_back(bloque);
            bloque = "";
        }
    }
    result = "";
    for (int i = 0; i < letras.size(); i++) {
        pos = stoi(letras[i]);
        result += (abc[pos]);
    }

    return result;
}

ZZ modulo(ZZ a, ZZ b) {
    ZZ aux = a / b;
    ZZ residuo = a - (aux * b);
    if (residuo < 0) {
        residuo += b;
    }
    return residuo;
}

bool euclides(ZZ a, ZZ b) {
    ZZ q;
    ZZ r_1 = a;
    ZZ r_2 = b;
    ZZ r;
    while (r_2 > 0) {
        q = r_1 / r_2;
        r = r_1 - (q * r_2);
        r_1 = r_2;
        r_2 = r;
    }
    if (r_1 == 1) {
        return true;
    }
    else {
        return false;
    }
}

ZZ explosion_modular(ZZ base, ZZ exponente, ZZ mod) {
    ZZ exp;
    exp = ZZ(1);
    cout << exp << endl;
    while (exponente > 0) {
        if (modulo(exponente, ZZ(2)) == 1) {
            exp = modulo((exp * base), mod);
        }
        cerr << exp << endl;
        base = modulo((base * base), mod);
        exponente = (exponente / 2);
    }
    return exp;
}

ZZ euclides_plus(ZZ a, ZZ b) {
    vector<ZZ> invrt;
    ZZ r_1 = a; // residuo
    ZZ r_2 = b;
    ZZ s_1 = ZZ(1); // x
    ZZ s_2 = ZZ(0);
    ZZ t_1 = ZZ(0); // y
    ZZ t_2 = ZZ(1);
    ZZ q = ZZ(0);
    ZZ r = ZZ(0);
    ZZ s = ZZ(0);
    ZZ t = ZZ(0);
    bool rtn = false;
    while (!rtn) {
        invrt.clear();
        while (r_2 > 0) {
            q = r_1 / r_2;
            r = r_1 % r_2;
            r_1 = r_2;
            r_2 = r;
            s = s_1 - (q * s_2);
            s_1 = s_2;
            s_2 = s;
            t = t_1 - (q * t_2);
            t_1 = t_2;
            t_2 = t;
        }
        if (r_1 == 1) {
            if (s_1 < 0) {
                s_1 += b;
            }
            rtn = true;
        }
    }
    if (r_1 == 1) {
        if (s_1 > 0) {
            return s_1;
        }
        else {
            ZZ aux = s_1 / b;
            ZZ residuo = s_1 - (b * aux);
            if (residuo < 0) {
                residuo += b;
            }
            return residuo;
        }
    }
    else {
        //cout << "no tiene inversa";
        return ZZ(0);
    }
}

int main() {
    /*E
    d = 77826773
    N = 95726647
    e = 6557
    */
    /*R
    d = 50109461
    N = 65028071
    e = 5885
    */
    /*
    N = 10967535067
    e = 7487898961
    d =
    p = 104723
    q = 104729
    */
    //7487898961 10967535067

    /*
    N = 108000519939650950931882676596323234165195935029234042922428003953075177312671426720582983905044008175722054131259946818675460815776605973063825200017364858692655596224240408300576770498315217000951739234425467065827801382258756304302316192906045796136110099058052708391287814449295704180171810679014061841761
    e = 65537
    d = 20630460795039294668908238526471620130828202551703327636997057867899784011738919863817055640435874976759149727165467968063812715759148727845126076552441985530736108110111448846674540490561546033930081404172567571840034896998711145562737843484995550341922413433773179020847632417716984355077274383505103652573
    */


    /*
    p=12989156945616691742279880650960867056654460452711763135323308730502204124563125702586386660138764910439735150755028306290095779293266635707981850246560019
    q=12106627304711853318691698112454400591862656834993452558853264431928310109418674116931683490798184385049152035858284821125057572307289317231525744165529663
    N=157254882142990657843981497213366293827343647541575480933944097775315626509197219419948716641545943656520504041895480688702559353082962367878628093881139883421974186423530628651456897127694974964036160211182079874979034965489917330173774956261476911923171256073931398461237145879846832734416921058682854343597
    e=32799138578198976956786658032036235659966061615635855233522585651687785126990919129170489782635399393256912482135503397298783554382996908444845355481052305431362600035084465284650206737268947412616547191174825823320167798073391978041319012257553491321495370600402235168237265031051837517050321304756093171255
    d=111568773103086293753482100756349450789392198471465680526241078180258418081750812124306244792028636903130234460350718415968645998777866116282582889555036837610429481838200602294085756233245986171906469902040681329226195036423393235007780703321131176901300136468687865037480316909068913821157337867520918128835
    */

    /*
    msg:
    yo :
    fernando : 0110618386803153343017131154761841786100785509977625804526657258377721429160897579918111980879415313035569544801753438296524124884877990313055899126864211284553097330404314771046402684978723354894652351144594820802580013570089393883354672732389231271851075583195316723967447666216308065404037344836156107500853530147173352826623579066782594578971166155215101011417319592450303007383962313670642032655653482397927852396058417719826753931024942678896137660524272048755088331824308711508804819539293686157671282277843870787362505486506225795308707537137035705823308840145921635448040279863786352468768568131474431916649115412669677999809718446398478648357834667554760817298771370451201026588515597309552611501160488996919697515642257703438975969178051539976148627651726741262537730444902662828464897599441235602628990530295040255660283351816596370900390857615788394161521545533992632341193779361029209663598413453380712431557104949155521068186279350703826413866577846673637596069380045476235619925451613206359035927379876949761354948385669741263396258842080904968555949026939906488073221719993002184329935450042862063283481452132154217524189171663360100135099159480481524167068071904215498399961814897566099148528359473424618418002578812194963547053517251801417956073676330050723880628879202848717548150834918437458679401218524162087490568424813568902315963405369178774617460834516195855047061812853942598529131376151149453624512324820502620767253968370723585520453468056228115412132259192332592287786667117554896758177444007314921050379398556147054955117644900722351587642513612861954164152793947807589940159048503502777895998350015852737824298230557329663196366472256861004020683331456608086836289887612554950930041856627393640500707096668384256539699761459776966692433386301043558050232133408437970763753154348519921866622599001758046855422107412029391113290608745834363940996010881082268721192691876486965371945649698803269738403510909407316534993238285389260893692698379477792685110857606677567124952579259759741198824199014312982552957173366037041965582535679201741459526674579341884444229035264377177363741341790358641417031476505285064939451870927293466387029731101155069254811665245735863547473505405781013056155139790151803706473588055250601991546444928482088360972106706226142736296116053290120156504307793956929802443305623130978131824493592088432164007247159843073591760400787656092050576881146246082798693905378707365949146701317162685258536429668494254270519849808869971938293032339969360884489838815695263358092150923251017163095077942800621771548503782109327946921879489448494844546528173719275500306447215248910121122206369692836442606201340733780484884737873193513887574454322573384441595597658911879236569142412808657349975888922963237787117992092658826241228930321137398854311322121330463301326943676464675951414038540339931984048694588186316773231332613111651166394358346949691405620933824672903661760861176703436473381357944477240431730855331289749025762116722592091244633392741735953691039151835487367389390449472888028498406335775352309432054575542197541245437044118278648279909948422441469755422429543570710718063458961770042705309759086662252901061678087362940474180324613053830273568541972976281125738719984801687529376203358776064529051618143954989113248705070727056955745215417871093295539984442792719280223217179203983227654038360327170860256982128068579286832095569300221356187436048450876466517491594918281150640273566827413496902224085350329579127428696712223752483516256844966254328608752009615562060403788167478088348983292690264683622832775804602969545086475400135198962012627495455408995154084737765300007346537356484580135261298617436388756495367926330390737978939231729139734199549320032668493993175650737680947697686721309188959717520786265744484064660297660364286864184806279796008929015724518200983392019403663098852696888017371013665629749894246079188918605999360510599368105617867772439430187083206232346254687335572634502362987215586860372125747003343863939228163642254083304168601484872747775818861966216694538422876671905465065857983318263691936253681626035134707519965956817367696685779558855113823693774243953545555733298236511345158421467011853010567159430377088833150040243751540416252922335517802838056221710605398048323576288991123203902093608336508725506905663220985305438190301610197114810776459153997601621984768489191357504994921078320562674942497736490751841550452435824545811127866634919864612155403026632364897837832546795267414987307027537666018615326459630361746558492169876578281566602819812140151213413733380705550742440873540738223050238588779778260200314586605519676422355788145702097377739996627647595698399144071999211981033703010292695770227189606717099951855964868387827875891787203129144278918120336995325735911408660921751677358265263585059969101071661030895004891101723170873189686966576684138558686285924726780604534031589178228439386425051882286943817796102009770
    rony : 2328683420448809104606109596061900343035495052316336121909372220656702385206246207100414618367215346553373879379829027194229656180751329582288404926507783924137498861595663552882023726683007011856998912178019601008329281660858946213291424754682357128886955052910536609914810641115697816474531062957887944875815362495454784020024708609706245203347163432193849296239081342020137588151925204041012421127447029703909566385069691037196141170854581668703171002944591784525906120168825019124675131468767186206426647467298543857043098160275885609559864991686554469233800737995585839859617288352251546622265906440201881816278907528184365067865762257514756159461697307645891845419459813812927475441324036399911336710660678841726845555046312728009168584722800830576971015181142935445200713960282788152848671161645588145779780472345327610063239795220010021516536582941554331579066940830041603004341183497427390693295999674554576542694492806012829417890572902847111343118637062905728060035995921495953312112553709214141456401709000107924722532211324278291106847695824328035269274219003174678579517440774733788535744192851844300648982971904807511768251328075416196526685174352567390647064286197903281566630107199172534245636766727872243359509647665099886949273975391197890891293533987554493622952708472705802496568969639257211660818396421145927307599613727432943823180119270751117838494830172751052753544145767203859091638667391463527971876614941621590596370286744875747440739926781971601396080533984428495804721856774153073280795470431399587153443366001951877958582661468554969321487433353989807298443735100899824516872947807851184029434033299746850759512614363862425619846561233406330620842723160561943373845234363439218281191344957573839893153136314981454494236439824794811069817478645863154019183658289074873500851898246772106909935137199211187274944507796496020740773094043074988550543321304970448206159711898002225169756578901450757082216911040873097430716028386413808069374169661067314656674638510887881674412900133766953264495169138547652151635039119847629726249565462687818439533508667957201333299448413396563267498755284072693149311476754450547677594838358550271553866003401179580484100519172049493880583622733673951142644784436951355408026394869143489402992035912936677159442901145092664269495435952030776162160915909184504603213550852349739585944953455414427947926216956283521191746600357023129448172153659022148000365949179736808846513851778217546501047328796526055809911881780774388056787554157647483297453657582885295453019506019031031000295766641570966796180175781581136465248129375831087061997499917667364932695238784433077654233287986994866540101465229905928026875700983481577752286072744813651759473824078988966940268916068263288057882082126491375845933098959713344768022041611828811473502008688933776945893774443608248624841584776928868535727690679472864912438031012148638638508429429811913481587028105423519389927454968782833364798300989433065186872189283679751214891674783089162740975484734051888054796891512153845052052982166574490094086915055721849636173734214186196862034537028310558827377818267099156349586965095313206410861093083894172207884126396801970703924129756984059753204248637095307863892741295858864993607568605789423837965129346580811235889221349977119100615225810967614638148329045681538484849679650864348310072263131820033123714595766250854946328047339323767785023433956070099338812308106530160185173200974361818512994429614851405575496428814010278995842204755814853010251052417018670913828596378232895685704405260232971532673147052012204002797664401729144735072066893408527735430908633298950913326844541305591853334482797869733753250395938217335672471495522582124666940841946220412695698742636387602901120847542552753807929938672485333905086560559922850741861860932341505444065616503746920519190233270046475689112627535768211205477979914884022130641916680629605725559903423502706545498204057730404418378061870364431439133865843676546800180715724137666349313205358989441484767292248504202025093359763095839685860154957683149857468000177323523270021037200460163176338122413162287324465038307677863833631316938469119762034597113286289096924522295891798070339709667647723910005055883880536142889627641931298192564183470863135491048826455061445814931962075364516469178682961689356357647462335323532017436321573490591439138659979285378973738130609434594766111332581031835688695917996801820204431731036430253179621882261319115765479181056250065077188936213445803921037101584273190157050433929302275338456580198595733380448113319964955663031988878036742826353647476802532936131806847117690311760263213239886412529853838618989391789154454746641365981988846016112886959410110267791831783756956123190890068781209842745635022346687152974873234546609620203164112153643160795970311155890421751205457540497010069618496108403765806536118134687057984496648741506764698089701884947115118622097599178044356109444550359119904088032
    bryan : 0637178618695385594147667881707816947089230494088072209132320410926083863655108422886394755870613169437600716247186395618449686681995909021592285569665084732609875928169630310457807163739243389064424961132370952125497190015580714821788012626198599271326173665021558652315218076150178823240091730638002545588072710810784524988003407632160622153783621840866803777721282247545525308968217568496592173297169420271813811611382400803312400127927577364043485845855941213105754204776981909856224806253438410837506640374304257455379463228662230040428274524004154985890330106067080767183811203630304113199576200921832202301371311441387532401051441463796398640918712438946847041852413429628747887628969490747887472158526366579678711091254224274050407153219145194187941827413609343312195589103878912120760911184430642736612878952464123977957887962166245049967553079101036019130992973432007207879987865031741420040409948253764540792843509344336789132679363882287313903259133680800693262083594654961400485166331273714512232113005694541434417211013739190347869759471254266475806560139886822606453072655353424216242611130384875590690208540245447300646198668526647135543106921744553717820402051863654487440137151812932831403236969387324901616908298122016021053477704385895796128135183081737308574190500518883019225877978735371255950992540759561016142502774839010561608181309274938727066110524645317609256508559329126282580916645709504057281929023826980336150181464968261635973442564420161650784245522645772858165431091502527709100125234503704780569916159342818911041909030167552380456077834138963496707876757527619965836971025471088870323309906451998297747452860104094199052647038369812012141408912567734191226446910954412022627820409983021988306169631544153847208902950181153408518753505735125200150962308671737857517160386532582398356847954468990765303837861672525400826207964036798623320526741635896371764797483489611696391835436774962720749115303874394698846614563000752400355530309312900235404312740060991783641568077444217580969079056258186541830357637503606059598529717806134086505326226897321563646068260126799373015947627561392611482545206062536063803612262252876524119812508424698783852949018590936473552019795398314790967015914856071700203637427206631048354092316196168722537757766362843855122093084107040324171659315802599150521501505472621938097764306063596584387415190390797001929297879885463829870819796004508775954754626258420369613988303024580894025674685154266188317404648868979305104604475353003046355366530136975008041362510129072682826890315329386906936071096903863824240458817087127410746089575984290899505069200926792935765451890980167682557377058111443032852929310490856379344598886259843019142697559243122665926108025764877220197366431199013264281759926372028894580662579012651935481889202677827968910055383673069342089579989351702650167700745424279814628780021673497378212889312176074944643509344514196061145232123920894798491348414925246752545514911937079545989339784771846295105102163680044064812848509529069975329931329358563717492380279781747045979650597428393644079773359039022578289717671529448791872860764352499544329257844668968932976687631702137807957941671525560682089455077719002464996092483229964943447241581050487936311037890084538863894501086021332926312200612612502864886713495365272950149626081908666855954441216185856821831116651783331716031423152545956272882737593235364196142434875365283180198657847601745054963141914981905412182645484188394663647399375543394648627991567977136211213338124896520452108820198579845090816292895314963056973116228093380577149837852844958800493470130349559868676916952062862111769465229650298414379742100424676237392394734749655990745705015949510418507898724781425042974270179872980287836678418823140628548141045163534237422625263675941858993661097757113310246342044419701070939408189303840123422093087369829184493299206541948315779054740246878910825624514569441112516897665157797888627585332703737627649601728779631099778941850603695527607416840200421918173799230037652485234299216427287039379682198101465599989966723492119998051309518521343704425986691122105080191222861013771937455507186410398508722043271272948575272383997703998676414535313850982044587534889372761746297056174384095388870631987229189245053770780353457954122703028872581679039264889372065526501596551921043892285484672632788749930249530569310674834489284506374469009311824606771358056935119334698385383209254882829100187542149008148792219586174455921995505340924326739425354476416673543544575440438410763755017083070236001594779604476093526913070513975676480168853281435974405020052824911643130145969214676336359993900717716224366314771273017273418200068621883688738999286464903427639437650142845911887575140795069828485717868008057832831345008695923969424446404564347516292502857507098872779747791966562926316321548857840446537449854966963257297203002928965564451835745922724209808798416374617434850531348487
    */


    vector <ZZ> a;
    ZZ uno, dos, tres;
    ZZ clv_p, clv_q;
    //cin >> clv_p;
    //cin >> clv_q;
    //RSA_BLOQUES claves(clv_p,clv_q);
    cout << "ingresa la clave N:" << endl;
    cin >> uno;
    cout << "ngresa la clave publica" << endl;
    cin >> dos;
    cout << "ingresa la clave privada:" << endl;
    cin >> tres;
    RSA_BLOQUES tetris(uno, dos, tres);
    string intento = tetris.descifrado("136987572540799317284519864517855797548059207630490321367741198681996373361066098063937600374163412281806698491358748970379121770022912534577673419876485932135193862834942657845723139253061129735564483094584817434421733488848997718147674538684663175972130784925046063614138433698472991179892063930285446450404019007818359561277482161361441618040093978706233775716943633247209861007349098454979122181827073040571069169729979470802265844324295282904595097676427304308166358462568757306608125948768894526728178901038493701967390134246842841763469197414381396423602948594434497863283236128010268381679734499315453908803236010286584609076629278369997431524353485962732813291280514941101296670076866775238279190264778310987902160420805185597827536650497572956280023801141415736109702088268450504046780723453119549360216962682544782998931930549343188028460947210418032254641918541591255295888466002096303672219314186924843202159992361132238352205562237661517134638607882807353410042824001467168097007655422037486263871461928066796091693168139774611731439480583552973556552378687382838693618286012606232968118179242451735114047793820368559663968430113588713498952140580138277380101158620082480952626288361759150372655262325038560650523595089895121997998194220162321967441285588761313836539143277916870961714295655160742156345451147026055295231844764655791117395310027751604754906556703232266513053740637495898780728124257756960673823022846232985143981834539560012067793352773272163589701313337453780155406530217049871986819982107097876695125267899708939086425070582829108847599681017968424569202654651132323894947602855644484544544057751854224794532600120790820409338169456182823541804408399689979183571851386363284162107748320840929853138773154300937671275592044360059544076818971276024984666810375616900455110491169401578158604798907662222309325870596055626170128774672407732704206223199537385071388074247492894642789217234768291263583297918666773558455193495715468837804438688242453861180752510018164770555331782615780732419486008997368878787507127521191412392860264183372312176299431356361416395909321348412925516310514485358321400075394040550567871462289975051822328156061062936165939887622911892743584209362466279722418819040192201069768297497315167971829621432119072960912951022522903223156491043476197052018175026022345333401433138820648016410429362560411404609723482997308436792518725331865635428253561076417636656998668198244737660037497775645467572331767212830198216889032212229418701920416366771443125951097771989891980184562284323323242904960440009466279473854445710495986689292002455496766647241190109344041243513109366643484063650147175154657741981837527141170738501532178137151372673558847744508088701065813461319203487419347160100132988777388102821158936484932396470736991137525702760274896347123125060093160612631650293057606990638998646501462806801794956683490309437953246998688590202521459468457327955100717109385452678400594659305009540103275290802123400883366598836373062150030970353234695385008476362375639054002365138928707443218586875519446375034925191894727215889552718902088267201721892229765804144081028366993218099374321281914966174886225491803318791789353132965330984610504446722607675036584952522420538281270130304033344706544146401714945746661955175393355451757229463780992421266504803758541772533013782893870053911736146003216794565450347834380376396126045848405008759316207152084752047966533046189468208604124855377147878059221948946782695480946211596472816194178099891398055819793925181690223301620392296526814922095012628783806914000706088124610774601045936983861308969564607758962046416210802273613398409011371019887488935302865060008446832719830384258317677786418932121212540968111695354710090315136132269131518099499607212473340742263309157568837587960829762498313651806229653777816487278601228139606762440911375769620076370432366658723757328477930414833825018736798241154026461677556290148477155068220460329790036091449489362495865133481461841110291935908574463073533346829570346715268096230930271260441869999872206429197084737470233162344185343128196899444609568134341600897014410904755189972553094337334762027855258699701376059080330880101634584966040587141857603093115333257063241142480055018193921082526538412038258933438913640526395786437891351608189841372368401647045703408057372948541789082064564256638150740364882635522474480028753101141146697288214377092485926725190085975477984535417657248755490946050753282217616197972081288612645767520008740338459801261191615777290335030864385423392103326005727062579325925703816999170193633905059313865176784521538517272708103056432731983669609491653933851");
    cout << endl << endl << endl << intento << endl << endl << endl;

}