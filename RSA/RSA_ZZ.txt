
ZZ modulo(ZZ a, ZZ b) {
    ZZ aux = a / b;
    ZZ residuo = a - (aux * b);
    if (residuo < 0) {
        residuo += b;
    }
    return residuo;
}

bool euclides(ZZ a, ZZ b) {
    ZZ q;
    ZZ r_1 = a;
    ZZ r_2 = b;
    ZZ r;
    while (r_2 > 0) {
        q = r_1 / r_2;
        r = r_1 - (q * r_2);
        r_1 = r_2;
        r_2 = r;
    }
    if (r_1 == 1) {
        return true;
    }
    else {
        return false;
    }
}

ZZ explosion_modular(ZZ base, ZZ exponente, ZZ mod) {
    ZZ exp = ZZ(1);
    while (exponente > 0) {
        if (modulo(exponente, ZZ(2)) == 1) {
            exp = modulo((exp * base), mod);
        }
        base = modulo((base * base), mod);
        exponente = (exponente / 2);
    }
    return exp;
}

ZZ euclides_plus(ZZ a, ZZ b) {
    vector<ZZ> invrt;
    ZZ r_1 = a; // residuo
    ZZ r_2 = b;
    ZZ s_1 = ZZ(1); // x
    ZZ s_2 = ZZ(0);
    ZZ t_1 = ZZ(0); // y
    ZZ t_2 = ZZ(1);
    ZZ q = ZZ(0);
    ZZ r = ZZ(0);
    ZZ s = ZZ(0);
    ZZ t = ZZ(0);
    bool rtn = false;
    while (!rtn) {
        invrt.clear();
        while (r_2 > 0) {
            q = r_1 / r_2;
            r = r_1 % r_2;
            r_1 = r_2;
            r_2 = r;
            s = s_1 - (q * s_2);
            s_1 = s_2;
            s_2 = s;
            t = t_1 - (q * t_2);
            t_1 = t_2;
            t_2 = t;
        }
        if (r_1 == 1) {
            if (s_1 < 0) {
                s_1 += b;
            }
            rtn = true;
        }
    }
    if (r_1 == 1) {
        if (s_1 > 0) {
            return s_1;
        }
        else {
            ZZ aux = s_1 / b;
            ZZ residuo = s_1 - ( b * aux);
            if (residuo < 0) {
                residuo += b;
            }
            return residuo;
        }
    }
    else {
        //cout << "no tiene inversa";
        return ZZ(0);
    }
}


class RSA {
    string abc;
    ZZ p, q;
    ZZ N;
    ZZ phi_N;
    ZZ Clav_pub;
    ZZ Clav_priv;
public:
    RSA(int a, int b);
    ZZ get_N();
    ZZ get_clv_priv();
    ZZ cifrado(string palabra, ZZ a, ZZ b);
    string descifrado(ZZ palabra, ZZ clv_priv, ZZ Ne);
};

RSA::RSA(int a, int b) {

    abc = "abcdefghijklmnopqrstuvwxyz().0123456789 ABCDEFGHIJKLMNOPQRSTUVWXYZ,+-";
    p = a;
    q = b;
    N = p * q;
    phi_N = (p - 1) * (q - 1);
    
}

ZZ RSA::get_N() {
    return N;
}

ZZ RSA::get_clv_priv() {
    return Clav_priv;
}

ZZ RSA::cifrado(string palabra, ZZ a, ZZ b) {
    Clav_pub = a;
    N = b;
    string cfr = "";
    ZZ pos = ZZ(abc.find(palabra));
    ZZ aux = Clav_pub;
    ZZ pos_2;
    pos_2 = explosion_modular(pos, Clav_pub, N);
    return pos_2;

}

string RSA::descifrado(ZZ palabra, ZZ clv_priv, ZZ Ne) {
    ZZ help = explosion_modular(palabra, clv_priv, Ne);
    cout << help << endl;
    string lol = "";
    lol = abc[to_int(help)];
    return lol;
}

int main() {
    /*E
    d = 77826773
    N = 95726647
    e = 6557
    */
    /*R
    d = 50109461
    N = 65028071
    e = 5885
    */
    RSA ayuda(0, 0);
    ZZ aux = ayuda.cifrado("R", ZZ(5885), ZZ(95726647));
    cout << ayuda.descifrado(aux, ZZ(77826773), ZZ(65028071)) << endl;
    }
